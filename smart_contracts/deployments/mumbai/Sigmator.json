{
  "address": "0x5F056bfc21Edf2E11f2d0bA15145196287EaD23d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "nftCreatePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFTNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedMoreETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftContractNotExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sigmatorNFT",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NFTCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "NftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "NftRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "x",
          "type": "address"
        }
      ],
      "name": "_addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "b",
          "type": "bytes1"
        }
      ],
      "name": "char",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "c",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketTableName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getNftContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractOwner",
          "type": "address"
        }
      ],
      "name": "getNftContractOwnerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNftCreatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getNftRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            }
          ],
          "internalType": "struct SigmatorNFTHandle.NftRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNftTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNftTableName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getNftTotalToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        }
      ],
      "name": "requestNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftCreatePrice",
          "type": "uint256"
        }
      ],
      "name": "setNftCreatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "finalCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "sigmatorTokenRarity",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "sigmatorTokenUris",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "sigmatorTotalToken",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "groupId",
          "type": "string"
        }
      ],
      "name": "upload",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x5F056bfc21Edf2E11f2d0bA15145196287EaD23d",
    "transactionIndex": 20,
    "gasUsed": "4039593",
    "logsBloom": "0x
    "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f",
    "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 29153668,
        "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f056bfc21edf2e11f2d0ba15145196287ead23d",
          "0x0000000000000000000000000000000000000000000000000000000000000ef6"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 29153668,
        "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000005f056bfc21edf2e11f2d0ba15145196287ead23d0000000000000000000000000000000000000000000000000000000000000ef600000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000099435245415445205441424c45207369676d61746f725f38303030312028696420696e7465676572207072696d617279206b65792c2075736572416464726573732074657874204e4f54204e554c4c2c206e6674416464726573732074657874204e4f54204e554c4c2c2067726f757049642074657874204e4f54204e554c4c2c2066696e616c4369642074657874204e4f54204e554c4c293b00000000000000",
        "logIndex": 83,
        "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 29153668,
        "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f056bfc21edf2e11f2d0ba15145196287ead23d",
          "0x0000000000000000000000000000000000000000000000000000000000000ef7"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 29153668,
        "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000005f056bfc21edf2e11f2d0ba15145196287ead23d0000000000000000000000000000000000000000000000000000000000000ef7000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a1435245415445205441424c45207369676d61746f725f38303030312028696420696e7465676572207072696d617279206b65792c2075736572416464726573732074657874204e4f54204e554c4c2c206e6674416464726573732074657874204e4f54204e554c4c2c20746f6b656e496420696e7465676572204e4f54204e554c4c2c20746f6b656e496e64657820696e7465676572204e4f54204e554c4c293b00000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 85,
        "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 29153668,
        "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
        "address": "0x5F056bfc21Edf2E11f2d0bA15145196287EaD23d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 29153668,
        "transactionHash": "0x5c9c1b23ec5c41a74dadd4a199e44268c4052910daa81801ef94c9db9996b65c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001586fb8eb40700000000000000000000000000000000000000000000000000b9bd8ce957a3814c00000000000000000000000000000000000000000000000000c70d24ffbae803000000000000000000000000000000000000000000000000b9a805edc8ef7a4c00000000000000000000000000000000000000000000000000dc94208e6eef03",
        "logIndex": 87,
        "blockHash": "0x2065c7fbb817996667c2acb9abc067a37e1fc3e3ce450b1cb7b995c04752958f"
      }
    ],
    "blockNumber": 29153668,
    "cumulativeGasUsed": "7805113",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4b48841d4b32c4650e4abc117a03fe8b51f38f68",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "1919",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "500000",
    "10000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "e25dba8b147e737e1e873ff9d2519345",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nftCreatePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftContractNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sigmatorNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NftRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"}],\"name\":\"_addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"char\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"c\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketTableName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getNftContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractOwner\",\"type\":\"address\"}],\"name\":\"getNftContractOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftCreatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getNftRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"internalType\":\"struct SigmatorNFTHandle.NftRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftTableName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getNftTotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"}],\"name\":\"requestNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftCreatePrice\",\"type\":\"uint256\"}],\"name\":\"setNftCreatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"finalCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"sigmatorTokenRarity\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"sigmatorTokenUris\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"sigmatorTotalToken\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"}],\"name\":\"upload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sigmator.sol\":\"Sigmator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of a TablelandController compliant contract.\\n *\\n * This interface can be implemented to enabled advanced access control for a table.\\n * Call {ITablelandTables-setController} with the address of your implementation.\\n *\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\n */\\ninterface ITablelandController {\\n    /**\\n     * @dev Object defining how a table can be accessed.\\n     */\\n    struct Policy {\\n        // Whether or not the table should allow SQL INSERT statements.\\n        bool allowInsert;\\n        // Whether or not the table should allow SQL UPDATE statements.\\n        bool allowUpdate;\\n        // Whether or not the table should allow SQL DELETE statements.\\n        bool allowDelete;\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n        // This can be useful for limiting how a table can be modified.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string whereClause;\\n        // A conditional clause used with SQL INSERT statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n        // This can be useful for limiting how table data ban be added.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string withCheck;\\n        // A list of SQL column names that can be updated.\\n        string[] updatableColumns;\\n    }\\n\\n    /**\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\n     */\\n    function getPolicy(address caller) external payable returns (Policy memory);\\n}\\n\",\"keccak256\":\"0xda5f7e8144be7322e66e0f6652e040d2e8409345843d225efdd11adf05cddf1d\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITablelandController.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        ITablelandController.Policy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function createTable(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner\\n     * - `tableId` must exist\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function runSQL(\\n        address caller,\\n        uint256 tableId,\\n        string memory statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd1ef1a6f33b3c5d28265c5315ea93adc3ebf9a44e3a5003cd31a651ba35dfb82\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Sigmator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"./SigmatorNFTTableland.sol\\\";\\nimport \\\"./SigmatorNFTHandle.sol\\\";\\nimport \\\"./SigmatorClimateNFT.sol\\\";\\n\\ncontract Sigmator is ERC721Holder, VRFConsumerBaseV2, SigmatorNFTTableland, SigmatorNFTHandle {\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    constructor(\\n        address registry,\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        uint256 nftCreatePrice\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) SigmatorNFTHandle(registry, nftCreatePrice) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function upload(\\n        string memory finalCid,\\n        string memory nftName,\\n        string memory nftSymbol,\\n        uint256 mintFee,\\n        uint256[] memory sigmatorTokenRarity,\\n        string[] memory sigmatorTokenUris,\\n        uint256 sigmatorTotalToken,\\n        string memory groupId\\n    ) public payable {\\n        _createNFT(\\n            msg.sender,\\n            finalCid,\\n            nftName,\\n            nftSymbol,\\n            mintFee,\\n            sigmatorTokenRarity,\\n            sigmatorTokenUris,\\n            sigmatorTotalToken,\\n            groupId\\n        );\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function requestNft(address nftContractAddress) public payable returns (uint256 requestId) {\\n        requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        _requestNft(nftContractAddress, requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls.\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        _fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    function withdraw() public {\\n        _withdraw(msg.sender);\\n    }\\n\\n    function withdrawMarketplace() public {\\n        _withdrawMarketplace();\\n    }\\n}\\n\",\"keccak256\":\"0xf61f2e0f57f9fdd809b4344818c12afc379177f2962b9183a7776015a90113b3\",\"license\":\"MIT\"},\"contracts/SigmatorClimateNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SigmatorClimateNFT is ERC721 {\\n    uint256 private s_tokenCounter;\\n    string baseuri = \\\"\\\";\\n\\n    uint256 private _nftTableId;\\n    string private _nftTableName;\\n    string private _prefix = \\\"sigmator\\\";\\n    // Interface to the `TablelandTables` registry contract\\n    ITablelandTables private _tableland;\\n\\n    /* Functions */\\n    constructor(\\n        string memory nftName,\\n        string memory nftSymbol,\\n        string memory _baseuri,\\n        address registry\\n    ) ERC721(nftName, nftSymbol) {\\n        baseuri = _baseuri;\\n        _tableland = ITablelandTables(registry);\\n\\n        _nftTableId = _tableland.createTable(\\n            address(this),\\n            /*\\n             *  CREATE TABLE {prefix}_{chainId} (\\n             *    id integer primary key,\\n             *    message text\\n             *  );\\n             */\\n            string.concat(\\n                \\\"CREATE TABLE \\\",\\n                _prefix,\\n                \\\"_\\\",\\n                Strings.toString(block.chainid),\\n                \\\" (id integer primary key, userAddress text NOT NULL, tokenId integer NOT NULL);\\\"\\n            )\\n        );\\n\\n        _nftTableName = string.concat(\\n            _prefix,\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_nftTableId)\\n        );\\n    }\\n\\n    function mint(address nftOwner) public returns (uint256) {\\n        // one nft per address\\n        require(balanceOf(nftOwner) == 0, \\\"NFT already minted\\\");\\n        uint256 newItemId = s_tokenCounter;\\n        s_tokenCounter = s_tokenCounter + 1;\\n        _safeMint(nftOwner, newItemId);\\n        _tableland.runSQL(\\n            address(this),\\n            _nftTableId,\\n            string.concat(\\n                \\\"INSERT INTO \\\",\\n                _nftTableName,\\n                \\\" (userAddress, tokenId) VALUES (\\\",\\n                \\\"'\\\",\\n                _addressToString(nftOwner),\\n                \\\"','\\\",\\n                Strings.toString(newItemId),\\n                \\\"');\\\"\\n            )\\n        );\\n        return newItemId;\\n    }\\n\\n    function _addressToString(address x) public pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string.concat(\\\"0x\\\", string(s));\\n    }\\n\\n    function char(bytes1 b) public pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    function getNftTableName() public view returns (string memory) {\\n        return _nftTableName;\\n    }\\n\\n    function getNftTableId() public view returns (uint256) {\\n        return _nftTableId;\\n    }\\n\\n    function _baseURI() internal view override(ERC721) returns (string memory) {\\n        return baseuri;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n}\\n\",\"keccak256\":\"0x3db75b5a9d19f0e70e58fd47d0a8616eeb33bae541dba65246822182910921ce\",\"license\":\"MIT\"},\"contracts/SigmatorNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SigmatorNFT is ERC721URIStorage, Ownable {\\n    uint256 private immutable i_mintFee;\\n    uint256 private s_tokenCounter;\\n    uint256 public s_requestId;\\n    string[] private s_sigmatorTokenUris;\\n    uint256[] private s_sigmatorTokenRarity;\\n    uint256 private s_sigmatorTotalToken;\\n    uint256 private constant MAX_CHANCE_VALUE = 100;\\n\\n    event NftMinted(uint256 index, address minter);\\n\\n    constructor(\\n        string memory nftName,\\n        string memory nftSymbol,\\n        uint256 mintFee,\\n        uint256[] memory sigmatorTokenRarity,\\n        string[] memory sigmatorTokenUris,\\n        uint256 sigmatorTotalToken\\n    ) ERC721(nftName, nftSymbol) {\\n        require((mintFee * 90) / 100 != 0, \\\"Low mint fee\\\"); //make sure that 90% of mint fee which owner will get isn't zero as it will be rounded off to int\\n        require(\\n            sigmatorTokenRarity.length == sigmatorTokenUris.length,\\n            \\\"Rarity and Uris length must be equal\\\"\\n        );\\n        i_mintFee = mintFee;\\n        s_sigmatorTotalToken = sigmatorTotalToken;\\n        s_sigmatorTokenRarity = sigmatorTokenRarity;\\n        s_sigmatorTokenUris = sigmatorTokenUris;\\n    }\\n\\n    function mint(address nftOwner, uint256 randomWord)\\n        public\\n        onlyOwner\\n        returns (uint256, uint256)\\n    {\\n        s_sigmatorTotalToken -= 1;\\n        uint256 newItemId = s_tokenCounter;\\n        s_tokenCounter = s_tokenCounter + 1;\\n        uint256 moddedRng = randomWord % MAX_CHANCE_VALUE;\\n        uint256 tokenIndex = 0;\\n        uint256 raritySum = 0;\\n        for (uint256 i = 0; i < s_sigmatorTokenRarity.length; i++) {\\n            raritySum += s_sigmatorTokenRarity[i];\\n            if (moddedRng < raritySum) {\\n                tokenIndex = i;\\n                break;\\n            }\\n        }\\n        _safeMint(nftOwner, newItemId);\\n        _setTokenURI(newItemId, s_sigmatorTokenUris[tokenIndex]);\\n        emit NftMinted(tokenIndex, nftOwner);\\n        return (newItemId, tokenIndex);\\n    }\\n\\n    function getMintFee() public view returns (uint256) {\\n        return i_mintFee;\\n    }\\n\\n    function getSigmatorTokenUris(uint256 index) public view returns (string memory) {\\n        return s_sigmatorTokenUris[index];\\n    }\\n\\n    function getSigmatorTokenRarity(uint256 index) public view returns (uint256) {\\n        return s_sigmatorTokenRarity[index];\\n    }\\n\\n    function getSigmatorTotalTokenUris() public view returns (uint256) {\\n        return s_sigmatorTokenUris.length;\\n    }\\n\\n    function getSigmatorTotalToken() public view returns (uint256) {\\n        return s_sigmatorTotalToken;\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n}\\n\",\"keccak256\":\"0xf35d63266c33f946d9d57bd489fdeffd928a635d03d79c203ad6d0e9bd9c0487\",\"license\":\"MIT\"},\"contracts/SigmatorNFTHandle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./SigmatorNFT.sol\\\";\\nimport \\\"./SigmatorNFTTableland.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror NeedMoreETH();\\nerror NFTNotAvailable();\\nerror WithdrawFailed();\\nerror NftContractNotExists();\\n\\ncontract SigmatorNFTHandle is SigmatorNFTTableland, Ownable {\\n    struct NftRequest {\\n        address requester;\\n        address nftContract;\\n    }\\n    event NFTCreated(address sigmatorNFT, address owner);\\n    event NftRequested(uint256 requestId, address requester);\\n    event NftMinted(address minter, address nftContract, uint256 tokenId, uint256 tokenIndex);\\n\\n    mapping(address => address) private nftToOwner;\\n    // VRF Helpers\\n    mapping(uint256 => NftRequest) private s_requestIdToNftRequest;\\n    mapping(address => uint256) private ownerToBalance;\\n    mapping(address => uint256) private nftToTotalToken; // total token of nft contract available\\n\\n    uint256 private s_nftCreatePrice;\\n\\n    constructor(address registry, uint256 nftCreatePrice) SigmatorNFTTableland(registry) {\\n        s_nftCreatePrice = nftCreatePrice;\\n    }\\n\\n    function _createNFT(\\n        address msgSender,\\n        string memory finalCid,\\n        string memory nftName,\\n        string memory nftSymbol,\\n        uint256 mintFee,\\n        uint256[] memory sigmatorTokenRarity,\\n        string[] memory sigmatorTokenUris,\\n        uint256 sigmatorTotalToken,\\n        string memory groupId\\n    ) internal virtual {\\n        if (msg.value < s_nftCreatePrice) {\\n            revert NeedMoreETH();\\n        }\\n        require(\\n            sigmatorTokenRarity.length == sigmatorTokenUris.length,\\n            \\\"Length of rarity and uri must be equal\\\"\\n        );\\n        require(sigmatorTokenRarity.length > 0, \\\"Length of rarity and uri must be greater than 0\\\");\\n        require(sigmatorTotalToken > 0, \\\"Total token must be greater than 0\\\");\\n        require(sigmatorTokenUris.length <= 5, \\\"Length of rarity and uri must be less than 5\\\");\\n        // check sum of token rarity must be equal to 100\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < sigmatorTokenRarity.length; i++) {\\n            sum += sigmatorTokenRarity[i];\\n        }\\n        require(sum == 100, \\\"Sum of token rarities must be equal to 100\\\");\\n        SigmatorNFT sigmatorNFT = new SigmatorNFT(\\n            nftName,\\n            nftSymbol,\\n            mintFee,\\n            sigmatorTokenRarity,\\n            sigmatorTokenUris,\\n            sigmatorTotalToken\\n        );\\n        nftToTotalToken[address(sigmatorNFT)] = sigmatorTotalToken;\\n        nftToOwner[address(sigmatorNFT)] = msgSender;\\n        // \\\" (id integer primary key, userAddress text NOT NULL, nftAddress text NOT NULL, postID integer NOT NULL);\\\"\\n        _createNftEntry(msgSender, address(sigmatorNFT), groupId, finalCid);\\n        emit NFTCreated(address(sigmatorNFT), msgSender);\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function _requestNft(address nftContractAddress, uint256 requestId) internal virtual {\\n        if (nftToOwner[nftContractAddress] == address(0)) {\\n            revert NftContractNotExists();\\n        }\\n        SigmatorNFT sigmatorNFT = SigmatorNFT(nftContractAddress);\\n        if (msg.value < sigmatorNFT.getMintFee()) {\\n            revert NeedMoreETH();\\n        }\\n        if (nftToTotalToken[nftContractAddress] == 0) {\\n            revert NFTNotAvailable();\\n        }\\n\\n        nftToTotalToken[nftContractAddress] -= 1;\\n\\n        s_requestIdToNftRequest[requestId] = NftRequest(msg.sender, nftContractAddress);\\n        emit NftRequested(requestId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls.\\n     */\\n    function _fulfillRandomWords(\\n        uint256 requestId, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal virtual {\\n        address nftOwner = s_requestIdToNftRequest[requestId].requester;\\n        address nftAddress = s_requestIdToNftRequest[requestId].nftContract;\\n        SigmatorNFT nftContract = SigmatorNFT(nftAddress);\\n\\n        (uint256 tokenId, uint256 tokenIndex) = nftContract.mint(nftOwner, randomWords[0]);\\n        _createNftMintEntry(nftOwner, nftAddress, tokenId, tokenIndex);\\n        ownerToBalance[nftToOwner[nftAddress]] += (nftContract.getMintFee() * 90) / 100;\\n        emit NftMinted(nftOwner, nftAddress, tokenId, tokenIndex);\\n    }\\n\\n    function _withdraw(address msgSender) internal virtual {\\n        require(ownerToBalance[msgSender] > 0);\\n        uint256 amount = ownerToBalance[msgSender];\\n        ownerToBalance[msgSender] = 0;\\n        (bool success, ) = payable(msgSender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n\\n    function _withdrawMarketplace() internal virtual onlyOwner {\\n        (bool success, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n\\n    function setNftCreatePrice(uint256 nftCreatePrice) public onlyOwner {\\n        s_nftCreatePrice = nftCreatePrice;\\n    }\\n\\n    function getNftCreatePrice() public view returns (uint256) {\\n        return s_nftCreatePrice;\\n    }\\n\\n    function getNftContractOwner(address nftContract) public view returns (address) {\\n        return nftToOwner[nftContract];\\n    }\\n\\n    function getNftContractOwnerBalance(address nftContractOwner) public view returns (uint256) {\\n        return ownerToBalance[nftContractOwner];\\n    }\\n\\n    function getNftTotalToken(address nftContract) public view returns (uint256) {\\n        return nftToTotalToken[nftContract];\\n    }\\n\\n    function getNftRequest(uint256 requestId) public view returns (NftRequest memory) {\\n        return s_requestIdToNftRequest[requestId];\\n    }\\n}\\n\",\"keccak256\":\"0x7f1be73a5f4171d0d46611efd429c9d2ce6031e54fe9e79bde270d3190da6a41\",\"license\":\"MIT\"},\"contracts/SigmatorNFTTableland.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract SigmatorNFTTableland {\\n    uint256 private _marketTableId;\\n    string private _marketTableName;\\n    uint256 private _nftTableId;\\n    string private _nftTableName;\\n    string private _prefix = \\\"sigmator\\\";\\n    // Interface to the `TablelandTables` registry contract\\n    ITablelandTables private _tableland;\\n\\n    constructor(address registry) {\\n        _tableland = ITablelandTables(registry);\\n        _marketTableId = _tableland.createTable(\\n            address(this),\\n            /*\\n             *  CREATE TABLE {prefix}_{chainId} (\\n             *    id integer primary key,\\n             *    message text\\n             *  );\\n             */\\n            string.concat(\\n                \\\"CREATE TABLE \\\",\\n                _prefix,\\n                \\\"_\\\",\\n                Strings.toString(block.chainid),\\n                \\\" (id integer primary key, userAddress text NOT NULL, nftAddress text NOT NULL, groupId text NOT NULL, finalCid text NOT NULL);\\\"\\n            )\\n        );\\n\\n        _marketTableName = string.concat(\\n            _prefix,\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_marketTableId)\\n        );\\n\\n        _nftTableId = _tableland.createTable(\\n            address(this),\\n            /*\\n             *  CREATE TABLE {prefix}_{chainId} (\\n             *    id integer primary key,\\n             *    message text\\n             *  );\\n             */\\n            string.concat(\\n                \\\"CREATE TABLE \\\",\\n                _prefix,\\n                \\\"_\\\",\\n                Strings.toString(block.chainid),\\n                \\\" (id integer primary key, userAddress text NOT NULL, nftAddress text NOT NULL, tokenId integer NOT NULL, tokenIndex integer NOT NULL);\\\"\\n            )\\n        );\\n\\n        _nftTableName = string.concat(\\n            _prefix,\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_nftTableId)\\n        );\\n    }\\n\\n    function _createNftEntry(\\n        address userAddress,\\n        address nftAddress,\\n        string memory groupId,\\n        string memory finalCid\\n    ) internal virtual {\\n        _tableland.runSQL(\\n            address(this),\\n            _marketTableId,\\n            string.concat(\\n                \\\"INSERT INTO \\\",\\n                _marketTableName,\\n                \\\" (userAddress, nftAddress, groupId, finalCid) VALUES (\\\",\\n                \\\"'\\\",\\n                _addressToString(userAddress),\\n                \\\"','\\\",\\n                _addressToString(nftAddress),\\n                \\\"','\\\",\\n                groupId,\\n                \\\"','\\\",\\n                finalCid,\\n                \\\"');\\\"\\n            )\\n        );\\n    }\\n\\n    function _createNftMintEntry(\\n        address userAddress,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) internal virtual {\\n        _tableland.runSQL(\\n            address(this),\\n            _nftTableId,\\n            string.concat(\\n                \\\"INSERT INTO \\\",\\n                _nftTableName,\\n                \\\" (userAddress, nftAddress, tokenId, tokenIndex) VALUES (\\\",\\n                \\\"'\\\",\\n                _addressToString(userAddress),\\n                \\\"','\\\",\\n                _addressToString(nftAddress),\\n                \\\"','\\\",\\n                Strings.toString(tokenId),\\n                \\\"','\\\",\\n                Strings.toString(tokenIndex),\\n                \\\"');\\\"\\n            )\\n        );\\n    }\\n\\n    function _addressToString(address x) public pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string.concat(\\\"0x\\\", string(s));\\n    }\\n\\n    function char(bytes1 b) public pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    function getMarketTableId() public view returns (uint256) {\\n        return _marketTableId;\\n    }\\n\\n    function getMarketTableName() public view returns (string memory) {\\n        return _marketTableName;\\n    }\\n\\n    function getNftTableId() public view returns (uint256) {\\n        return _nftTableId;\\n    }\\n\\n    function getNftTableName() public view returns (string memory) {\\n        return _nftTableName;\\n    }\\n}\\n\",\"keccak256\":\"0xcd283df51cff0bb6ffcafac54bfd6e10aff1a324a71e88501942af9e6cf2e4ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260086101208190526739b4b3b6b0ba37b960c11b6101409081526200002e916004919062000472565b503480156200003c57600080fd5b5060405162004c9938038062004c998339810160408190526200005f9162000535565b6001600160a01b03858116608052600580546001600160a01b0319169188169182179055869082908290633a9151b0306004620000a84662000303602090811b620009f817901c565b604051602001620000bb929190620006d1565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401620000e992919062000797565b6020604051808303816000875af115801562000109573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012f9190620007db565b60008190555060046200014d466200030360201b620009f81760201c565b620001656000546200030360201b620009f81760201c565b6040516020016200017993929190620007f5565b604051602081830303815290604052600190805190602001906200019f92919062000472565b506005546001600160a01b0316633a9151b0306004620001cb4662000303602090811b620009f817901c565b604051602001620001de9291906200084a565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016200020c92919062000797565b6020604051808303816000875af11580156200022c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002529190620007db565b600281905550600462000270466200030360201b620009f81760201c565b620002886002546200030360201b620009f81760201c565b6040516020016200029c93929190620007f5565b60405160208183030381529060405260039080519060200190620002c292919062000472565b50620002d090503362000420565b600b5550506001600160a01b0390931660a05260e0526001600160401b031660c05263ffffffff166101005250620009f8565b606081620003285750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200035857806200033f8162000935565b9150620003509050600a8362000969565b91506200032c565b6000816001600160401b0381111562000375576200037562000980565b6040519080825280601f01601f191660200182016040528015620003a0576020820181803683370190505b5090505b84156200041857620003b860018362000996565b9150620003c7600a86620009b0565b620003d4906030620009c7565b60f81b818381518110620003ec57620003ec620009e2565b60200101906001600160f81b031916908160001a90535062000410600a8662000969565b9450620003a4565b949350505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200048090620005bf565b90600052602060002090601f016020900481019282620004a45760008555620004ef565b82601f10620004bf57805160ff1916838001178555620004ef565b82800160010185558215620004ef579182015b82811115620004ef578251825591602001919060010190620004d2565b50620004fd92915062000501565b5090565b5b80821115620004fd576000815560010162000502565b80516001600160a01b03811681146200053057600080fd5b919050565b60008060008060008060c087890312156200054f57600080fd5b6200055a8762000518565b95506200056a6020880162000518565b60408801519095506001600160401b03811681146200058857600080fd5b60608801516080890151919550935063ffffffff81168114620005aa57600080fd5b8092505060a087015190509295509295509295565b600181811c90821680620005d457607f821691505b60208210811415620005f657634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c90808316806200061757607f831692505b60208084108214156200063a57634e487b7160e01b600052602260045260246000fd5b818015620006515760018114620006635762000692565b60ff1986168952848901965062000692565b60008881526020902060005b868110156200068a5781548b8201529085019083016200066f565b505084890196505b50505050505092915050565b60005b83811015620006bb578181015183820152602001620006a1565b83811115620006cb576000848401525b50505050565b6c021a922a0aa22902a20a126229609d1b81526000620006f5600d830185620005fc565b605f60f81b81528351620007118160018401602088016200069e565b60008051602062004c598339815191526001929091019182015260008051602062004c7983398151915260218201527f74657874204e4f54204e554c4c2c2067726f757049642074657874204e4f542060418201527f4e554c4c2c2066696e616c4369642074657874204e4f54204e554c4c293b00006061820152607f01949350505050565b60018060a01b03831681526040602082015260008251806040840152620007c68160608501602087016200069e565b601f01601f1916919091016060019392505050565b600060208284031215620007ee57600080fd5b5051919050565b6000620008038286620005fc565b605f60f81b808252855162000820816001850160208a016200069e565b600192019182015283516200083d8160028401602088016200069e565b0160020195945050505050565b6c021a922a0aa22902a20a126229609d1b815260006200086e600d830185620005fc565b605f60f81b815283516200088a8160018401602088016200069e565b60008051602062004c598339815191526001929091019182015260008051602062004c7983398151915260218201527f74657874204e4f54204e554c4c2c20746f6b656e496420696e7465676572204e60418201527f4f54204e554c4c2c20746f6b656e496e64657820696e7465676572204e4f54206061820152654e554c4c293b60d01b6081820152608701949350505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156200094c576200094c6200091f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200097b576200097b62000953565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015620009ab57620009ab6200091f565b500390565b600082620009c257620009c262000953565b500690565b60008219821115620009dd57620009dd6200091f565b500190565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e0516101005161421562000a4460003960006108c2015260006108600152600061088f015260006108f301526000818161050a015261054d01526142156000f3fe608060405260043610620001435760003560e01c806366a8cd4711620000b95780638188a6c611620000785780638188a6c6146200041d57806388e9a48a14620004355780638da5cb5b146200045a578063bca89cc3146200047a578063c75ee78414620004b4578063f2fde38b14620004cb57600080fd5b806366a8cd47146200034157806369f9ad2f1462000359578063715018a6146200039857806374fad9b714620003b0578063750e6fde146200040657600080fd5b80633ccfd60b11620001065780633ccfd60b146200024157806348076c9914620002595780634dfcc3b5146200027057806352f0851d146200030357806358758418146200032a57600080fd5b8063068de28c14620001485780630b30f7bb146200016f5780630b8d9a6f14620001bc578063150b7a0214620001d35780631fe543e3146200021c575b600080fd5b3480156200015557600080fd5b506200016d6200016736600462001527565b620004f0565b005b3480156200017c57600080fd5b50620001a96200018e36600462001559565b6001600160a01b03166000908152600a602052604090205490565b6040519081526020015b60405180910390f35b348015620001c957600080fd5b50600b54620001a9565b348015620001e057600080fd5b5062000202620001f236600462001626565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001620001b3565b3480156200022957600080fd5b506200016d6200023b36600462001745565b620004ff565b3480156200024e57600080fd5b506200016d6200058f565b6200016d6200026a3660046200183d565b6200059c565b3480156200027d57600080fd5b50620002db6200028f36600462001527565b604080518082019091526000808252602082015250600090815260086020908152604091829020825180840190935280546001600160a01b039081168452600190910154169082015290565b6040805182516001600160a01b039081168252602093840151169281019290925201620001b3565b3480156200031057600080fd5b506200031b620005b9565b604051620001b39190620019bb565b3480156200033757600080fd5b50600054620001a9565b3480156200034e57600080fd5b506200031b62000653565b3480156200036657600080fd5b506200037e62000378366004620019d0565b62000664565b6040516001600160f81b03199091168152602001620001b3565b348015620003a557600080fd5b506200016d620006a4565b348015620003bd57600080fd5b50620003ed620003cf36600462001559565b6001600160a01b039081166000908152600760205260409020541690565b6040516001600160a01b039091168152602001620001b3565b3480156200041357600080fd5b50600254620001a9565b3480156200042a57600080fd5b506200016d620006ba565b3480156200044257600080fd5b506200031b6200045436600462001559565b620006c4565b3480156200046757600080fd5b506006546001600160a01b0316620003ed565b3480156200048757600080fd5b50620001a96200049936600462001559565b6001600160a01b031660009081526009602052604090205490565b620001a9620004c536600462001559565b62000851565b348015620004d857600080fd5b506200016d620004ea36600462001559565b62000979565b620004fa62000b16565b600b55565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200057f5760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6200058b828262000b72565b5050565b6200059a3362000b7e565b565b620005af33898989898989898962000c2e565b5050505050505050565b606060018054620005ca90620019fc565b80601f0160208091040260200160405190810160405280929190818152602001828054620005f890620019fc565b8015620006495780601f106200061d5761010080835404028352916020019162000649565b820191906000526020600020905b8154815290600101906020018083116200062b57829003601f168201915b5050505050905090565b606060038054620005ca90620019fc565b6000600a60f883901c10156200068e576200068560f883901c603062001a4f565b60f81b92915050565b6200068560f883901c605762001a4f565b919050565b620006ae62000b16565b6200059a600062000f7a565b6200059a62000fcc565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015620008265760006200070482601362001a77565b6200071190600862001a91565b6200071e90600262001bb2565b62000733906001600160a01b03871662001bd6565b60f81b9050600060108260f81c6200074c919062001bed565b60f81b905060008160f81c601062000765919062001c12565b8360f81c62000775919062001c36565b60f81b9050620007858262000664565b856200079386600262001a91565b81518110620007a657620007a662001c5c565b60200101906001600160f81b031916908160001a905350620007c88162000664565b85620007d686600262001a91565b620007e390600162001c72565b81518110620007f657620007f662001c5c565b60200101906001600160f81b031916908160001a90535050505080806200081d9062001c8d565b915050620006eb565b50806040516020016200083a919062001cc9565b604051602081830303815290604052915050919050565b6040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166064820152600160848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a4016020604051808303816000875af115801562000945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200096b919062001cf5565b90506200069f82826200105f565b6200098362000b16565b6001600160a01b038116620009ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000576565b620009f58162000f7a565b50565b60608162000a1d5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562000a4d578062000a348162001c8d565b915062000a459050600a8362001bd6565b915062000a21565b60008167ffffffffffffffff81111562000a6b5762000a6b6200157e565b6040519080825280601f01601f19166020018201604052801562000a96576020820181803683370190505b5090505b841562000b0e5762000aae60018362001a77565b915062000abd600a8662001d0f565b62000aca90603062001c72565b60f81b81838151811062000ae25762000ae262001c5c565b60200101906001600160f81b031916908160001a90535062000b06600a8662001bd6565b945062000a9a565b949350505050565b6006546001600160a01b031633146200059a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000576565b6200058b82826200121c565b6001600160a01b03811660009081526009602052604090205462000ba157600080fd5b6001600160a01b038116600081815260096020526040808220805490839055905190929083908381818185875af1925050503d806000811462000c01576040519150601f19603f3d011682016040523d82523d6000602084013e62000c06565b606091505b505090508062000c2957604051631d42c86760e21b815260040160405180910390fd5b505050565b600b5434101562000c5257604051633b7f4ae160e21b815260040160405180910390fd5b825184511462000cb45760405162461bcd60e51b815260206004820152602660248201527f4c656e677468206f662072617269747920616e6420757269206d75737420626560448201526508195c5d585b60d21b606482015260840162000576565b600084511162000d1f5760405162461bcd60e51b815260206004820152602f60248201527f4c656e677468206f662072617269747920616e6420757269206d75737420626560448201526e02067726561746572207468616e203608c1b606482015260840162000576565b6000821162000d7c5760405162461bcd60e51b815260206004820152602260248201527f546f74616c20746f6b656e206d7573742062652067726561746572207468616e604482015261020360f41b606482015260840162000576565b60058351111562000de55760405162461bcd60e51b815260206004820152602c60248201527f4c656e677468206f662072617269747920616e6420757269206d75737420626560448201526b206c657373207468616e203560a01b606482015260840162000576565b6000805b855181101562000e345785818151811062000e085762000e0862001c5c565b60200260200101518262000e1d919062001c72565b91508062000e2b8162001c8d565b91505062000de9565b508060641462000e9a5760405162461bcd60e51b815260206004820152602a60248201527f53756d206f6620746f6b656e207261726974696573206d757374206265206571604482015269075616c20746f203130360b41b606482015260840162000576565b600088888888888860405162000eb09062001519565b62000ec19695949392919062001d26565b604051809103906000f08015801562000ede573d6000803e3d6000fd5b506001600160a01b038181166000908152600a602090815260408083208990556007909152902080546001600160a01b031916918e16919091179055905062000f2a8b82858d62001412565b604080516001600160a01b0380841682528d1660208201527fe4944a5f0bf5ee82c3c6769e53000a678b52be77b461a2e8f7b3434eff94670e910160405180910390a15050505050505050505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000fd662000b16565b600062000feb6006546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d806000811462001037576040519150601f19603f3d011682016040523d82523d6000602084013e6200103c565b606091505b5050905080620009f557604051631d42c86760e21b815260040160405180910390fd5b6001600160a01b03828116600090815260076020526040902054166200109857604051639ac95c8560e01b815260040160405180910390fd5b6000829050806001600160a01b0316637a5caab36040518163ffffffff1660e01b8152600401602060405180830381865afa158015620010dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001102919062001cf5565b3410156200112357604051633b7f4ae160e21b815260040160405180910390fd5b6001600160a01b0383166000908152600a60205260409020546200115a5760405163314a94b160e21b815260040160405180910390fd5b6001600160a01b0383166000908152600a602052604081208054600192906200118590849062001a77565b9091555050604080518082018252338082526001600160a01b038681166020808501918252600088815260088252869020945185549084166001600160a01b031991821617865591516001909501805495909316949091169390931790558251858152918201527ff873236e6cc0ecc5be1a9a35c95ee5b8d1ac4cc7bfef0cc5060391d6cc98e26b910160405180910390a1505050565b6000828152600860205260408120805460019091015483516001600160a01b039283169392909116918291819083906340c10f199087908990859062001266576200126662001c5c565b60200260200101516040518363ffffffff1660e01b8152600401620012a09291906001600160a01b03929092168252602082015260400190565b60408051808303816000875af1158015620012bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012e5919062001dfe565b91509150620012f785858484620014bb565b6064836001600160a01b0316637a5caab36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001338573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200135e919062001cf5565b6200136b90605a62001a91565b62001377919062001bd6565b6001600160a01b038086166000908152600760209081526040808320549093168252600990529081208054909190620013b290849062001c72565b9091555050604080516001600160a01b03808816825286166020820152908101839052606081018290527f626891549ebaf8778d610f7553b514ef8ebb8efec5da288b9e0a934e7cc235519060800160405180910390a150505050505050565b6005546000546001600160a01b039091169063eaf5d04e90309060016200143989620006c4565b6200144489620006c4565b88886040516020016200145c95949392919062001ec5565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016200148b9392919062001fc9565b600060405180830381600087803b158015620014a657600080fd5b505af1158015620005af573d6000803e3d6000fd5b6005546002546001600160a01b039091169063eaf5d04e9030906003620014e289620006c4565b620014ed89620006c4565b620014f889620009f8565b6200150389620009f8565b6040516020016200145c95949392919062001ffb565b6120f180620020ef83390190565b6000602082840312156200153a57600080fd5b5035919050565b80356001600160a01b03811681146200069f57600080fd5b6000602082840312156200156c57600080fd5b620015778262001541565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620015c057620015c06200157e565b604052919050565b600067ffffffffffffffff831115620015e557620015e56200157e565b620015fa601f8401601f191660200162001594565b90508281528383830111156200160f57600080fd5b828260208301376000602084830101529392505050565b600080600080608085870312156200163d57600080fd5b620016488562001541565b9350620016586020860162001541565b925060408501359150606085013567ffffffffffffffff8111156200167c57600080fd5b8501601f810187136200168e57600080fd5b6200169f87823560208401620015c8565b91505092959194509250565b600067ffffffffffffffff821115620016c857620016c86200157e565b5060051b60200190565b600082601f830112620016e457600080fd5b81356020620016fd620016f783620016ab565b62001594565b82815260059290921b840181019181810190868411156200171d57600080fd5b8286015b848110156200173a578035835291830191830162001721565b509695505050505050565b600080604083850312156200175957600080fd5b82359150602083013567ffffffffffffffff8111156200177857600080fd5b6200178685828601620016d2565b9150509250929050565b600082601f830112620017a257600080fd5b6200157783833560208501620015c8565b600082601f830112620017c557600080fd5b81356020620017d8620016f783620016ab565b82815260059290921b84018101918181019086841115620017f857600080fd5b8286015b848110156200173a57803567ffffffffffffffff8111156200181e5760008081fd5b6200182e8986838b010162001790565b845250918301918301620017fc565b600080600080600080600080610100898b0312156200185b57600080fd5b883567ffffffffffffffff808211156200187457600080fd5b620018828c838d0162001790565b995060208b01359150808211156200189957600080fd5b620018a78c838d0162001790565b985060408b0135915080821115620018be57600080fd5b620018cc8c838d0162001790565b975060608b0135965060808b0135915080821115620018ea57600080fd5b620018f88c838d01620016d2565b955060a08b01359150808211156200190f57600080fd5b6200191d8c838d01620017b3565b945060c08b0135935060e08b01359150808211156200193b57600080fd5b506200194a8b828c0162001790565b9150509295985092959890939650565b60005b83811015620019775781810151838201526020016200195d565b8381111562001987576000848401525b50505050565b60008151808452620019a78160208601602086016200195a565b601f01601f19169290920160200192915050565b6020815260006200157760208301846200198d565b600060208284031215620019e357600080fd5b81356001600160f81b0319811681146200157757600080fd5b600181811c9082168062001a1157607f821691505b6020821081141562001a3357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff0382111562001a6f5762001a6f62001a39565b019392505050565b60008282101562001a8c5762001a8c62001a39565b500390565b600081600019048311821515161562001aae5762001aae62001a39565b500290565b600181815b8085111562001af457816000190482111562001ad85762001ad862001a39565b8085161562001ae657918102915b93841c939080029062001ab8565b509250929050565b60008262001b0d5750600162001bac565b8162001b1c5750600062001bac565b816001811462001b35576002811462001b405762001b60565b600191505062001bac565b60ff84111562001b545762001b5462001a39565b50506001821b62001bac565b5060208310610133831016604e8410600b841016171562001b85575081810a62001bac565b62001b91838362001ab3565b806000190482111562001ba85762001ba862001a39565b0290505b92915050565b600062001577838362001afc565b634e487b7160e01b600052601260045260246000fd5b60008262001be85762001be862001bc0565b500490565b600060ff83168062001c035762001c0362001bc0565b8060ff84160491505092915050565b600060ff821660ff84168160ff048111821515161562001ba85762001ba862001a39565b600060ff821660ff84168082101562001c535762001c5362001a39565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b6000821982111562001c885762001c8862001a39565b500190565b600060001982141562001ca45762001ca462001a39565b5060010190565b6000815162001cbf8185602086016200195a565b9290920192915050565b61060f60f31b81526000825162001ce88160028501602087016200195a565b9190910160020192915050565b60006020828403121562001d0857600080fd5b5051919050565b60008262001d215762001d2162001bc0565b500690565b60c08152600062001d3b60c08301896200198d565b60208382038185015262001d50828a6200198d565b604085018990528481036060860152875180825282890193509082019060005b8181101562001d8e5784518352938301939183019160010162001d70565b5050848103608086015286518082528282019350600581901b8201830183890160005b8381101562001de357601f1985840301875262001dd08383516200198d565b9686019692509085019060010162001db1565b505080955050505050508260a0830152979650505050505050565b6000806040838503121562001e1257600080fd5b505080516020909101519092909150565b8054600090600181811c908083168062001e3e57607f831692505b602080841082141562001e6157634e487b7160e01b600052602260045260246000fd5b81801562001e78576001811462001e8a5762001eb9565b60ff1986168952848901965062001eb9565b60008881526020902060005b8681101562001eb15781548b82015290850190830162001e96565b505084890196505b50505050505092915050565b6b024a729a2a92a1024a72a27960a51b8152600062001ee8600c83018862001e23565b7f202875736572416464726573732c206e6674416464726573732c2067726f7570815275092c85840ccd2dcc2d886d2c85240ac8298aa8aa640560531b6020820152602760f81b6036820152865162001f49816037840160208b016200195a565b80820191505062272c2760e81b806037830152865162001f7181603a850160208b016200195a565b603a920191820152845162001f8e81603d8401602089016200195a565b0162001fa2603d820162272c2760e81b9052565b62001fb1604082018562001cab565b6227293b60e81b815260030198975050505050505050565b60018060a01b038416815282602082015260606040820152600062001ff260608301846200198d565b95945050505050565b6b024a729a2a92a1024a72a27960a51b815260006200201e600c83018862001e23565b7f202875736572416464726573732c206e6674416464726573732c20746f6b656e81527f49642c20746f6b656e496e646578292056414c554553202800000000000000006020820152602760f81b6038820152865162002086816039840160208b016200195a565b80820191505062272c2760e81b8060398301528651620020ae81603c850160208b016200195a565b603c9201918201528451620020cb81603f8401602089016200195a565b01620020df603f820162272c2760e81b9052565b62001fb1604282018562001cab56fe60a06040523480156200001157600080fd5b50604051620020f1380380620020f1833981016040819052620000349162000579565b8551869086906200004d906000906020850190620001d3565b50805162000063906001906020840190620001d3565b505050620000806200007a6200017d60201b60201c565b62000181565b60646200008f85605a62000644565b6200009b919062000672565b620000dc5760405162461bcd60e51b815260206004820152600c60248201526b4c6f77206d696e742066656560a01b60448201526064015b60405180910390fd5b81518351146200013b5760405162461bcd60e51b8152602060048201526024808201527f52617269747920616e642055726973206c656e677468206d75737420626520656044820152631c5d585b60e21b6064820152608401620000d3565b6080849052600c81905582516200015a90600b90602086019062000262565b5081516200017090600a9060208501906200029f565b50505050505050620006d2565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001e19062000695565b90600052602060002090601f01602090048101928262000205576000855562000250565b82601f106200022057805160ff191683800117855562000250565b8280016001018555821562000250579182015b828111156200025057825182559160200191906001019062000233565b506200025e929150620002ff565b5090565b8280548282559060005260206000209081019282156200025057916020028201828111156200025057825182559160200191906001019062000233565b828054828255906000526020600020908101928215620002f1579160200282015b82811115620002f15782518051620002e0918491602090910190620001d3565b5091602001919060010190620002c0565b506200025e92915062000316565b5b808211156200025e576000815560010162000300565b808211156200025e5760006200032d828262000337565b5060010162000316565b508054620003459062000695565b6000825580601f1062000356575050565b601f016020900490600052602060002090810190620003769190620002ff565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003ba57620003ba62000379565b604052919050565b600082601f830112620003d457600080fd5b81516001600160401b03811115620003f057620003f062000379565b602062000406601f8301601f191682016200038f565b82815285828487010111156200041b57600080fd5b60005b838110156200043b5785810183015182820184015282016200041e565b838111156200044d5760008385840101525b5095945050505050565b60006001600160401b0382111562000473576200047362000379565b5060051b60200190565b600082601f8301126200048f57600080fd5b81516020620004a8620004a28362000457565b6200038f565b82815260059290921b84018101918181019086841115620004c857600080fd5b8286015b84811015620004e55780518352918301918301620004cc565b509695505050505050565b600082601f8301126200050257600080fd5b8151602062000515620004a28362000457565b82815260059290921b840181019181810190868411156200053557600080fd5b8286015b84811015620004e55780516001600160401b038111156200055a5760008081fd5b6200056a8986838b0101620003c2565b84525091830191830162000539565b60008060008060008060c087890312156200059357600080fd5b86516001600160401b0380821115620005ab57600080fd5b620005b98a838b01620003c2565b97506020890151915080821115620005d057600080fd5b620005de8a838b01620003c2565b9650604089015195506060890151915080821115620005fc57600080fd5b6200060a8a838b016200047d565b945060808901519150808211156200062157600080fd5b506200063089828a01620004f0565b92505060a087015190509295509295509295565b60008160001904831182151516156200066d57634e487b7160e01b600052601160045260246000fd5b500290565b6000826200069057634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680620006aa57607f821691505b60208210811415620006cc57634e487b7160e01b600052602260045260246000fd5b50919050565b608051611a03620006ee600039600061027d0152611a036000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637a5caab3116100c3578063c31af2f91161007c578063c31af2f9146102e8578063c87b56dd146102f0578063d5e529b414610303578063e89e106a14610316578063e985e9c51461031f578063f2fde38b1461035b57600080fd5b80637a5caab31461027b5780638da5cb5b146102a157806395d89b41146102b2578063a22cb465146102ba578063b172cb92146102cd578063b88d4fde146102d557600080fd5b806340c10f191161011557806340c10f191461020057806342842e0e146102285780636352211e1461023b5780636e02007d1461024e57806370a0823114610260578063715018a61461027357600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c557806323b872dd146101da578063262c4e79146101ed575b600080fd5b61017061016b366004611516565b61036e565b60405190151581526020015b60405180910390f35b61018d6103c0565b60405161017c919061158b565b6101ad6101a836600461159e565b610452565b6040516001600160a01b03909116815260200161017c565b6101d86101d33660046115d3565b610479565b005b6101d86101e83660046115fd565b610594565b61018d6101fb36600461159e565b6105c5565b61021361020e3660046115d3565b610674565b6040805192835260208301919091520161017c565b6101d86102363660046115fd565b61081d565b6101ad61024936600461159e565b610838565b6008545b60405190815260200161017c565b61025261026e366004611639565b610898565b6101d861091e565b7f0000000000000000000000000000000000000000000000000000000000000000610252565b6007546001600160a01b03166101ad565b61018d610932565b6101d86102c8366004611654565b610941565b600c54610252565b6101d86102e33660046116a6565b610950565b600a54610252565b61018d6102fe36600461159e565b610988565b61025261031136600461159e565b610a99565b61025260095481565b61017061032d366004611782565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101d8610369366004611639565b610ac0565b60006001600160e01b031982166380ac58cd60e01b148061039f57506001600160e01b03198216635b5e139f60e01b145b806103ba57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103cf906117b5565b80601f01602080910402602001604051908101604052809291908181526020018280546103fb906117b5565b80156104485780601f1061041d57610100808354040283529160200191610448565b820191906000526020600020905b81548152906001019060200180831161042b57829003601f168201915b5050505050905090565b600061045d82610b39565b506000908152600460205260409020546001600160a01b031690565b600061048482610838565b9050806001600160a01b0316836001600160a01b031614156104f75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105135750610513813361032d565b6105855760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016104ee565b61058f8383610b98565b505050565b61059e3382610c06565b6105ba5760405162461bcd60e51b81526004016104ee906117f0565b61058f838383610c84565b6060600a82815481106105da576105da61183e565b9060005260206000200180546105ef906117b5565b80601f016020809104026020016040519081016040528092919081815260200182805461061b906117b5565b80156106685780601f1061063d57610100808354040283529160200191610668565b820191906000526020600020905b81548152906001019060200180831161064b57829003601f168201915b50505050509050919050565b60008061067f610e20565b6001600c6000828254610692919061186a565b90915550506008546106a5816001611881565b60085560006106b56064866118af565b905060008060005b600b5481101561071457600b81815481106106da576106da61183e565b9060005260206000200154826106f09190611881565b91508184101561070257809250610714565b8061070c816118c3565b9150506106bd565b5061071f8885610e7a565b6107ce84600a84815481106107365761073661183e565b90600052602060002001805461074b906117b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610777906117b5565b80156107c45780601f10610799576101008083540402835291602001916107c4565b820191906000526020600020905b8154815290600101906020018083116107a757829003601f168201915b5050505050610e94565b604080518381526001600160a01b038a1660208201527f769eff512f395b679667e0062a0e31dad5d22dbc7e6b87f16c3de7e85e663460910160405180910390a1509196919550909350505050565b61058f83838360405180602001604052806000815250610950565b6000818152600260205260408120546001600160a01b0316806103ba5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104ee565b60006001600160a01b0382166109025760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104ee565b506001600160a01b031660009081526003602052604090205490565b610926610e20565b6109306000610f2e565b565b6060600180546103cf906117b5565b61094c338383610f80565b5050565b61095a3383610c06565b6109765760405162461bcd60e51b81526004016104ee906117f0565b6109828484848461104f565b50505050565b606061099382610b39565b600082815260066020526040812080546109ac906117b5565b80601f01602080910402602001604051908101604052809291908181526020018280546109d8906117b5565b8015610a255780601f106109fa57610100808354040283529160200191610a25565b820191906000526020600020905b815481529060010190602001808311610a0857829003601f168201915b505050505090506000610a4360408051602081019091526000815290565b9050805160001415610a56575092915050565b815115610a88578082604051602001610a709291906118de565b60405160208183030381529060405292505050919050565b610a9184611082565b949350505050565b6000600b8281548110610aae57610aae61183e565b90600052602060002001549050919050565b610ac8610e20565b6001600160a01b038116610b2d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ee565b610b3681610f2e565b50565b6000818152600260205260409020546001600160a01b0316610b365760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104ee565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610bcd82610838565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c1283610838565b9050806001600160a01b0316846001600160a01b03161480610c5957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a915750836001600160a01b0316610c7284610452565b6001600160a01b031614949350505050565b826001600160a01b0316610c9782610838565b6001600160a01b031614610cfb5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104ee565b6001600160a01b038216610d5d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104ee565b610d68600082610b98565b6001600160a01b0383166000908152600360205260408120805460019290610d9190849061186a565b90915550506001600160a01b0382166000908152600360205260408120805460019290610dbf908490611881565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546001600160a01b031633146109305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ee565b61094c8282604051806020016040528060008152506110f6565b6000828152600260205260409020546001600160a01b0316610f0f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104ee565b6000828152600660209081526040909120825161058f92840190611467565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610fe25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104ee565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61105a848484610c84565b61106684848484611129565b6109825760405162461bcd60e51b81526004016104ee9061190d565b606061108d82610b39565b60006110a460408051602081019091526000815290565b905060008151116110c457604051806020016040528060008152506110ef565b806110ce84611227565b6040516020016110df9291906118de565b6040516020818303038152906040525b9392505050565b6111008383611325565b61110d6000848484611129565b61058f5760405162461bcd60e51b81526004016104ee9061190d565b60006001600160a01b0384163b1561121c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061116d90339089908890889060040161195f565b6020604051808303816000875af19250505080156111a8575060408051601f3d908101601f191682019092526111a59181019061199c565b60015b611202573d8080156111d6576040519150601f19603f3d011682016040523d82523d6000602084013e6111db565b606091505b5080516111fa5760405162461bcd60e51b81526004016104ee9061190d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a91565b506001949350505050565b60608161124b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611275578061125f816118c3565b915061126e9050600a836119b9565b915061124f565b60008167ffffffffffffffff81111561129057611290611690565b6040519080825280601f01601f1916602001820160405280156112ba576020820181803683370190505b5090505b8415610a91576112cf60018361186a565b91506112dc600a866118af565b6112e7906030611881565b60f81b8183815181106112fc576112fc61183e565b60200101906001600160f81b031916908160001a90535061131e600a866119b9565b94506112be565b6001600160a01b03821661137b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104ee565b6000818152600260205260409020546001600160a01b0316156113e05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104ee565b6001600160a01b0382166000908152600360205260408120805460019290611409908490611881565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611473906117b5565b90600052602060002090601f01602090048101928261149557600085556114db565b82601f106114ae57805160ff19168380011785556114db565b828001600101855582156114db579182015b828111156114db5782518255916020019190600101906114c0565b506114e79291506114eb565b5090565b5b808211156114e757600081556001016114ec565b6001600160e01b031981168114610b3657600080fd5b60006020828403121561152857600080fd5b81356110ef81611500565b60005b8381101561154e578181015183820152602001611536565b838111156109825750506000910152565b60008151808452611577816020860160208601611533565b601f01601f19169290920160200192915050565b6020815260006110ef602083018461155f565b6000602082840312156115b057600080fd5b5035919050565b80356001600160a01b03811681146115ce57600080fd5b919050565b600080604083850312156115e657600080fd5b6115ef836115b7565b946020939093013593505050565b60008060006060848603121561161257600080fd5b61161b846115b7565b9250611629602085016115b7565b9150604084013590509250925092565b60006020828403121561164b57600080fd5b6110ef826115b7565b6000806040838503121561166757600080fd5b611670836115b7565b91506020830135801515811461168557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156116bc57600080fd5b6116c5856115b7565b93506116d3602086016115b7565b925060408501359150606085013567ffffffffffffffff808211156116f757600080fd5b818701915087601f83011261170b57600080fd5b81358181111561171d5761171d611690565b604051601f8201601f19908116603f0116810190838211818310171561174557611745611690565b816040528281528a602084870101111561175e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561179557600080fd5b61179e836115b7565b91506117ac602084016115b7565b90509250929050565b600181811c908216806117c957607f821691505b602082108114156117ea57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561187c5761187c611854565b500390565b6000821982111561189457611894611854565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826118be576118be611899565b500690565b60006000198214156118d7576118d7611854565b5060010190565b600083516118f0818460208801611533565b835190830190611904818360208801611533565b01949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906119929083018461155f565b9695505050505050565b6000602082840312156119ae57600080fd5b81516110ef81611500565b6000826119c8576119c8611899565b50049056fea26469706673582212208acb564df0aedfe0087467616c08373d02feef765dea26f9ef2dc4e66432c00b64736f6c634300080c0033a2646970667358221220416e49f59ba3b64c429c5e07dbd69018cffbb9419e9632350de6a3c281554dbd64736f6c634300080c00332028696420696e7465676572207072696d617279206b65792c2075736572416464726573732074657874204e4f54204e554c4c2c206e66744164647265737320",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3540,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_marketTableId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3542,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_marketTableName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3544,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_nftTableId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3546,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_nftTableName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3549,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_prefix",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3552,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_tableland",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITablelandTables)2166"
      },
      {
        "astId": 161,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3074,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "nftToOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3079,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "s_requestIdToNftRequest",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(NftRequest)3048_storage)"
      },
      {
        "astId": 3083,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "ownerToBalance",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3087,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "nftToTotalToken",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3089,
        "contract": "contracts/Sigmator.sol:Sigmator",
        "label": "s_nftCreatePrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITablelandTables)2166": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(NftRequest)3048_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SigmatorNFTHandle.NftRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(NftRequest)3048_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NftRequest)3048_storage": {
        "encoding": "inplace",
        "label": "struct SigmatorNFTHandle.NftRequest",
        "members": [
          {
            "astId": 3045,
            "contract": "contracts/Sigmator.sol:Sigmator",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3047,
            "contract": "contracts/Sigmator.sol:Sigmator",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}